Singles
-------

Singles are perhaps the most versatile :ref:`Module <Concepts:Modules>` type that Providence provides. Singles allow you to represent an arbitrary data structure in your state manager without creating extra boilerplate for their maintenance.

Singles are commonly composed into :ref:`Lists <module_types/lists:Lists>`.

Single Controllers
==================

As with all Providence modules, you will want to interact with Singles through their :ref:`controllers <module_types/singles:Controller Reference>`.

To get a new single controller:

.. tabbed:: React/Redux

   .. dropdown:: TypeScript
      :open:

      .. code-block:: jsx

         import {useSingle} from '@opencraft/providence/react/hooks'

         // Declare a type in TypeScript to get typechecking for your single's data structure.
         declare interface MyStructureType {
           id: number,
           name: string,
         }

         const MyComponent = () => {
           controller = useSingle<MyStructureType>('currentItem', {endpoint: 'https://example.com/api/endpoint/'})
           // ... The rest of your component code goes here!
         }

   .. dropdown:: JavaScript

     .. code-block:: jsx

        import {useSingle} from '@opencraft/providence/react/hooks'

        const MyComponent = () => {
          controller = useSingle('currentItem', {endpoint: 'https://example.com/api/endpoint/'})
          // ... The rest of your component code goes here!
        }

.. tabbed:: Vue/Vuex

   .. dropdown:: TypeScript
      :open:

      .. code-block:: typescript

         // Coming once the Vuex module is completed.

   .. dropdown:: JavaScript

      .. code-block:: javascript

         // Coming once the Vuex module is completed.


Single Module Options
#####################

In most cases, you'll only need to hand the `retrieval function <Single Controllers>`_ the :js:attr:`endpoint <SingleModuleOptions.endpoint>` of the object you're
retrieving, but you may also need to set a number of other attributes.

.. js:autoclass:: SingleModuleOptions
   :members:


Controller Reference
####################

The single controller is the main interface by which you interact with the single module-- and thus your state management library. :ref:`Check here for a primer on controllers as a concept.<Concepts:Controllers>`

.. js:autoclass:: SingleController
   :members:

Patchers
========

Patchers are a special, controller-like wrapper around the attributes of singles. They act as proxies for sending patch requests to a server. This is especially useful for cases like Vue's `v-model`, but also allows for more terse functions in the case of React's event listeners.

Say you had a controller for a Product type:

.. code-block:: typescript

   declare interface Product {
     id: number,
     name: string,
     description: string,
     hidden: boolean,
   }

You could update the value of `hidden` by setting its value on the autogenerated patcher:

.. code-block:: typescript

   // Output: false
   console.log(controller.x.hidden)

   controller.p.hidden.model = true
   // Output: true
   console.log(controller.p.hidden.model)
   // Still false, as this value is canonical until the server update is completed:
   console.log(controller.x.hidden)
   // Also true, since the update is not complete:
   console.log(controller.p.hidden.dirty)

The value on a Patcher's :js:attr:`model <Patcher.model>` field is instantly updated, and in the backrgound, a `patch` request is dispatched to the :js:attr:`endpoint <SingleController.endpoint>` with the data `{"hidden": true}`.

Up until the patcher succeeds, its :js:attr:`dirty <Patcher.dirty>` flag stays true. If an error occurs while performing the patch request, errors will appear in `controller.p.hidden.errors`. See below for more attributes and methods.

.. js:autoclass:: Patcher
   :members:
